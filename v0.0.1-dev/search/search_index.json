{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cedar python","text":""},{"location":"#example-usage","title":"Example usage","text":"<p>This example assumes that:</p> <ul> <li>a cedar policies file exists in working directory with the name <code>policies.cedar</code></li> <li>a cedar schema file exists in working directory with the name <code>schema.cedar</code></li> </ul> <pre><code>from pathlib import Path\nfrom cedar import Entities, PolicySet, Request, Schema, is_authorized, EntityUid\n\npolicies = PolicySet.from_string(Path(\"policies.cedar\").read_text())  # (1)\n\nschema = Schema.from_string(Path(\"schema.cedar\").read_text())         # (2)\n\nentities = Entities.from_list([                                       # (3)\n    {\n        \"uid\": {\n            \"type\": \"Group\",\n            \"id\": \"admins\"\n        },\n        \"parents\": [],\n        \"attrs\": {}\n    },\n    {\n        \"uid\": {\n            \"type\": \"User\",\n            \"id\": \"alice\",\n        },\n        \"parents\": [\n            { \"type\": \"Group\", \"id\": \"admin\" }\n        ],\n        \"attrs\": {}\n    },\n])\n\nrequest = Request(                                              # (4)\n    principal=EntityUid.from_type_name_and_id(\"User\", \"alice\"),\n    action=EntityUid.from_type_name_and_id(\"Action\", \"doSomething\"),\n    resource=EntityUid.from_type_name_and_id(\"MyCustomResource\", \"some-unique-id\"),\n    context={\"active\": True},\n)\n\nresponse = is_authorized(request, policies, entities, schema)   # (5)\n</code></pre> <ol> <li>Parse policy set from file in Cedar format</li> <li>Parse schema from file in Cedar format</li> <li>Build entities to use with the requests</li> <li>Build authorization request</li> <li>Evaluate request and obtain authorization response</li> </ol>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Tests</li> <li>Reference</li> </ul>"},{"location":"tests/","title":"Tests","text":"<p>This project passes the integration tests on the cedar-integration-tests project.</p> <p>The following parametrized test is used for all scenarios found within <code>cedar-integration-tests</code> corpus:</p> <pre><code>@pytest.mark.parametrize((\"test_scenario\", \"test_case\"), TEST_CASES, ids=TEST_CASES_IDS)\ndef test_scenario(test_scenario: Scenario, test_case: Case) -&gt; None:\n    \"\"\"Run a test case from a scenario provided by cedar-integration-tests corpus.\"\"\"\n\n    from cedar import Entities, PolicySet, Request, Schema, is_authorized\n\n    # Load policies, schema and entities from files\n    policies = PolicySet.from_string(test_scenario.policies.read_text())\n    schema = Schema.from_string(test_scenario.schema.read_text())\n    entities = Entities.from_json(test_scenario.entities.read_text())\n    # Build request from test case attributes\n    request = Request.from_dict(\n        {\n            \"principal\": test_case.principal,\n            \"action\": test_case.action,\n            \"resource\": test_case.resource,\n            \"context\": test_case.context,\n        }\n    )\n    # Evaluate request (only use schema if test case indicates that request should be validated)\n    response = is_authorized(\n        request,\n        policies,\n        entities,\n        schema if test_case.validate_request else None,\n    )\n    # Check response\n    assert str(response.decision) == test_case.decision  # \"allow\" or \"deny\"\n    assert response.diagnostics.errors == test_case.errors\n    assert response.diagnostics.reasons == set(test_case.reason)\n</code></pre> <p>Check out e2e/test_corpus.py file from the project repository.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>is_authorized</li> <li>is_authorized_batch</li> <li>Policy</li> <li>PolicySet</li> <li>EntityUid</li> <li>Entity</li> <li>Entities</li> <li>Schema</li> <li>Request</li> <li>Response</li> <li>Authorizer</li> <li>Utilities</li> </ul>"},{"location":"reference/authorizer/","title":"Authorizer","text":""},{"location":"reference/authorizer/#cedar.Authorizer","title":"Authorizer","text":"<pre><code>Authorizer(\n    policies: PolicySet | None = None,\n    schema: Schema | None = None,\n)\n</code></pre> <p>Cedar authorizer</p> <p>If a schema is provided, policies are validated against the schema.</p> <p>Schema is also used to validate entities when using Authorizer.is_authorized and Authorizer.is_authorized_batch</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>PolicySet | None</code> <p>the policies to used when checking authorization</p> <code>None</code> <code>schema</code> <code>Schema | None</code> <p>the schema used to verify policies, entities and requests</p> <code>None</code> <p>Methods:</p> Name Description <code>is_authorized</code> <p>Check if principal is authorized to perform action on resource within context.</p> <code>is_authorized_batch</code> <p>Check if list of requests are authorized.</p>"},{"location":"reference/authorizer/#cedar.Authorizer.is_authorized","title":"is_authorized  <code>method descriptor</code>","text":"<pre><code>is_authorized(\n    request: Request, entities: Entities | None = None\n) -&gt; Response\n</code></pre> <p>Check if principal is authorized to perform action on resource within context.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>a request describing principal, action, resource and context</p> required <code>entities</code> <code>Entities | None</code> <p>the entities to consider when applying policies</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>An authorization response</p>"},{"location":"reference/authorizer/#cedar.Authorizer.is_authorized_batch","title":"is_authorized_batch  <code>method descriptor</code>","text":"<pre><code>is_authorized_batch(\n    requests: list[Request],\n    entities: Entities | None = None,\n) -&gt; list[Response]\n</code></pre> <p>Check if list of requests are authorized.</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>list[Request]</code> <p>a list of requests describing principals, actions, resources and contexts</p> required <code>entities</code> <code>Entities | None</code> <p>the entities to consider when applying policies</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Response]</code> <p>A list of authorization responses</p>"},{"location":"reference/entities/","title":"Entities","text":""},{"location":"reference/entities/#cedar.Entities","title":"Entities","text":"<pre><code>Entities(\n    entities: list[Entity], schema: Schema | None = None\n)\n</code></pre> <p>Represents an entity hierarchy, and allows looking up Entity objects by Uid.</p> <p>Parameters:</p> Name Type Description Default <code>entities</code> <code>list[Entity]</code> <p>a list of entities</p> required <code>schema</code> <code>Schema | None</code> <p>an optional schema used for entities validation</p> <code>None</code> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities</li> <li>https://docs.cedarpolicy.com/policies/syntax-entity.html#entity-overview</li> </ul> <p>Methods:</p> Name Description <code>from_json</code> <p>Create entities from a JSON string.</p> <code>from_list</code> <p>Create entities from a python list of entities as dict.</p> <code>to_json</code> <p>Serialize entities to JSON string.</p> <code>to_list</code> <p>Serialize entities to a python list of dictionaries.</p>"},{"location":"reference/entities/#cedar.Entities.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(\n    text: str, /, *, schema: Schema | None = None\n) -&gt; Entities\n</code></pre> <p>Create entities from a JSON string.</p> <p>If a schema argument is provided, entities definitions will be validated against given schema.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in JSON format</p> required <code>schema</code> <code>Schema | None</code> <p>an optional schema used for entity validation</p> <code>None</code> <p>Returns:</p> Type Description <code>Entities</code> <p>An entity</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entities/#cedar.Entities.from_list","title":"from_list  <code>staticmethod</code>","text":"<pre><code>from_list(\n    values: list[dict[str, Any]],\n    /,\n    *,\n    schema: Schema | None = None,\n) -&gt; Entities\n</code></pre> <p>Create entities from a python list of entities as dict.</p> <p>If a schema argument is provided, entities definitions will be validated against given schema.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[dict[str, Any]]</code> <p>list holding entities as dictionaries</p> required <code>schema</code> <code>Schema | None</code> <p>an optional schema used for entity validation</p> <code>None</code> <p>Returns:</p> Type Description <code>Entities</code> <p>An entity</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entities/#cedar.Entities.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize entities to JSON string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in JSON format</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entities/#cedar.Entities.to_list","title":"to_list  <code>method descriptor</code>","text":"<pre><code>to_list() -&gt; list[dict[str, Any]]\n</code></pre> <p>Serialize entities to a python list of dictionaries.</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>A python list holding entities as dict</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entity/","title":"Entity","text":""},{"location":"reference/entity/#cedar.Entity","title":"Entity","text":"<pre><code>Entity(\n    euid: EntityUid,\n    parents: list[EntityUid],\n    attrs: dict[str, Any],\n    schema: Schema | None = None,\n)\n</code></pre> <p>Entity datatype</p> <p>An entity in Cedar is a stored object that serves as the representation for principals, actions, and resources that are part of your application.</p> <p>Parameters:</p> Name Type Description Default <code>euid</code> <code>EntityUid</code> <p>the entity unique id</p> required <code>parents</code> <code>list[EntityUid]</code> <p>a list holding entity unique id of parent entities</p> required <code>attrs</code> <code>dict[str, Any]</code> <p>a dictionary holding entity attributes</p> required <code>schema</code> <code>Schema | None</code> <p>an optional schema used for entity validation</p> <code>None</code> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities</li> <li>https://docs.cedarpolicy.com/policies/syntax-entity.html#entity-overview</li> </ul> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create an entity from a python dictionary.</p> <code>from_json</code> <p>Create an entity from a JSON string.</p> <code>to_dict</code> <p>Serialize entity to a python dict.</p> <code>to_json</code> <p>Serialize entity to JSON string.</p>"},{"location":"reference/entity/#cedar.Entity.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(\n    values: dict[str, Any],\n    /,\n    *,\n    schema: Schema | None = None,\n) -&gt; Entity\n</code></pre> <p>Create an entity from a python dictionary.</p> <p>If a schema argument is provided, entity definition will be validated against given schema.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict[str, Any]</code> <p>dictionary holding entity definition</p> required <code>schema</code> <code>Schema | None</code> <p>an optional schema used for entity validation</p> <code>None</code> <p>Returns:</p> Type Description <code>Entity</code> <p>An entity</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entity/#cedar.Entity.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(\n    text: str, /, *, schema: Schema | None = None\n) -&gt; Entity\n</code></pre> <p>Create an entity from a JSON string.</p> <p>If a schema argument is provided, entity definition will be validated against given schema.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in JSON format</p> required <code>schema</code> <code>Schema | None</code> <p>an optional schema used for entity validation</p> <code>None</code> <p>Returns:</p> Type Description <code>Entity</code> <p>An entity</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entity/#cedar.Entity.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize entity to a python dict.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A python dict holding entity definitions</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entity/#cedar.Entity.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize entity to JSON string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in JSON format</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#entities-syntax</li> </ul>"},{"location":"reference/entity_uid/","title":"EntityUid","text":""},{"location":"reference/entity_uid/#cedar.EntityUid","title":"EntityUid","text":"<pre><code>EntityUid(entity_type: str, entity_id: str)\n</code></pre> <p>Entity Unique ID</p> <p>An entity represents a principal, action, or resource in your authorization model. Each entity has a unique ID composed of a type name and a resource id.</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-datatypes.html#datatype-entity</li> </ul> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create an EntityUid from a python dict.</p> <code>from_json</code> <p>Create an EntityUid from JSON string.</p> <code>from_string</code> <p>Create an EntityUid from a string.</p> <code>from_type_name_and_id</code> <p>Create a new Euid from entity type name and id</p> <code>to_dict</code> <p>Serialize entity uid to python dictionary.</p> <code>to_json</code> <p>Serialize entity uid to JSON string.</p> <code>to_string</code> <p>Serialize entity uid to string.</p> <p>Attributes:</p> Name Type Description <code>entity_id</code> <code>str</code> <p>Get entity id</p> <code>entity_type</code> <code>str</code> <p>Get entity type name</p>"},{"location":"reference/entity_uid/#cedar.EntityUid.entity_id","title":"entity_id  <code>property</code>","text":"<pre><code>entity_id: str\n</code></pre> <p>Get entity id</p> <p>Returns:</p> Type Description <code>str</code> <p>The id of the entity</p>"},{"location":"reference/entity_uid/#cedar.EntityUid.entity_type","title":"entity_type  <code>property</code>","text":"<pre><code>entity_type: str\n</code></pre> <p>Get entity type name</p> <p>Returns:</p> Type Description <code>str</code> <p>The type name of the entity</p>"},{"location":"reference/entity_uid/#cedar.EntityUid.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: dict[str, str]) -&gt; EntityUid\n</code></pre> <p>Create an EntityUid from a python dict.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict[str, str]</code> <p>a dict holding uid definition.</p> required <p>Returns:</p> Type Description <code>EntityUid</code> <p>An entity uid.</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#uid</li> </ul>"},{"location":"reference/entity_uid/#cedar.EntityUid.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str) -&gt; EntityUid\n</code></pre> <p>Create an EntityUid from JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in JSON format</p> required <p>Returns:</p> Type Description <code>EntityUid</code> <p>An entity uid.</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#uid</li> </ul>"},{"location":"reference/entity_uid/#cedar.EntityUid.from_string","title":"from_string  <code>staticmethod</code>","text":"<pre><code>from_string(text: str) -&gt; EntityUid\n</code></pre> <p>Create an EntityUid from a string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string</p> required <p>Returns:</p> Type Description <code>EntityUid</code> <p>An entity uid.</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-datatypes.html#datatype-entity</li> </ul>"},{"location":"reference/entity_uid/#cedar.EntityUid.from_type_name_and_id","title":"from_type_name_and_id  <code>staticmethod</code>","text":"<pre><code>from_type_name_and_id(name: str, id: str) -&gt; EntityUid\n</code></pre> <p>Create a new Euid from entity type name and id</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>the entity type name</p> required <code>id</code> <code>str</code> <p>the entity id</p> required <p>Returns:</p> Type Description <code>EntityUid</code> <p>An entity uid</p>"},{"location":"reference/entity_uid/#cedar.EntityUid.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, str]\n</code></pre> <p>Serialize entity uid to python dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>A python dictionary with two keys: <code>\"type\"</code> and <code>\"id\"</code></p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#uid</li> </ul>"},{"location":"reference/entity_uid/#cedar.EntityUid.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize entity uid to JSON string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in JSON format</p> See also <ul> <li>https://docs.cedarpolicy.com/auth/entities-syntax.html#uid</li> </ul>"},{"location":"reference/entity_uid/#cedar.EntityUid.to_string","title":"to_string  <code>method descriptor</code>","text":"<pre><code>to_string() -&gt; str\n</code></pre> <p>Serialize entity uid to string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-datatypes.html#datatype-entity</li> </ul>"},{"location":"reference/is_authorized/","title":"is_authorized","text":""},{"location":"reference/is_authorized/#cedar.is_authorized","title":"is_authorized  <code>builtin</code>","text":"<pre><code>is_authorized(\n    request: Request,\n    policies: PolicySet,\n    entities: Entities | None = None,\n    schema: Schema | None = None,\n) -&gt; Response\n</code></pre> <p>Check if principal is authorized to perform action on resource within context.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>a request describing principal, action, resource and context</p> required <code>policies</code> <code>PolicySet</code> <p>the policies to apply when checking authorization</p> required <code>entities</code> <code>Entities | None</code> <p>the entities to consider when applying policies</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A list of authorization responses</p>"},{"location":"reference/is_authorized_batch/","title":"is_authorized_batch","text":""},{"location":"reference/is_authorized_batch/#cedar.is_authorized_batch","title":"is_authorized_batch  <code>builtin</code>","text":"<pre><code>is_authorized_batch(\n    requests: list[Request],\n    policies: PolicySet,\n    entities: Entities | None = None,\n    schema: Schema | None = None,\n) -&gt; list[Response]\n</code></pre> <p>Check if list of requests are authorized.</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>list[Request]</code> <p>a list of authorization requests</p> required <code>policies</code> <code>PolicySet</code> <p>the policies to apply when checking authorization</p> required <code>entities</code> <code>Entities | None</code> <p>the entities to consider when applying policies</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Response]</code> <p>A list of authorization responses</p>"},{"location":"reference/policy/","title":"Policy","text":""},{"location":"reference/policy/#cedar.Policy","title":"Policy","text":"<p>Cedar policy</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> <li>https://docs.cedarpolicy.com/policies/policy-examples.html</li> <li>https://docs.rs/cedar-policy/latest/cedar_policy/struct.Policy.html</li> </ul> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create a policy from a dict holding JSON policy definition.</p> <code>from_json</code> <p>Create a policy from a string in JSON policy format.</p> <code>from_string</code> <p>Create a policy from a string in Cedar policy format.</p> <code>to_dict</code> <p>Serialize policy into python dictionary.</p> <code>to_json</code> <p>Serialize policy into JSON string.</p> <code>to_pretty_string</code> <p>Serialize policy into formatted Cedar policy string.</p> <code>to_string</code> <p>Serialize policy into Cedar policy string.</p> <p>Attributes:</p> Name Type Description <code>effect</code> <code>Effect</code> <p>Get policy effect.</p> <code>policy_id</code> <code>str</code> <p>Get policy ID as string.</p>"},{"location":"reference/policy/#cedar.Policy.effect","title":"effect  <code>property</code>","text":"<pre><code>effect: Effect\n</code></pre> <p>Get policy effect.</p> <p>Returns:</p> Type Description <code>Effect</code> <p>The policy effect.</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html#term-policy-effect</li> </ul>"},{"location":"reference/policy/#cedar.Policy.policy_id","title":"policy_id  <code>property</code>","text":"<pre><code>policy_id: str\n</code></pre> <p>Get policy ID as string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The policy ID as string</p>"},{"location":"reference/policy/#cedar.Policy.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(\n    values: dict[str, Any], /, *, id: str | None = None\n) -&gt; Policy\n</code></pre> <p>Create a policy from a dict holding JSON policy definition.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict[str, Any]</code> <p>a dict holding JSON policy definition</p> required <p>Returns:</p> Type Description <code>Policy</code> <p>A policy</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy/#cedar.Policy.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str, id: str | None = None) -&gt; Policy\n</code></pre> <p>Create a policy from a string in JSON policy format.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in JSON policy format</p> required <p>Returns:</p> Type Description <code>Policy</code> <p>A policy</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy/#cedar.Policy.from_string","title":"from_string  <code>staticmethod</code>","text":"<pre><code>from_string(text: str, id: str | None = None) -&gt; Policy\n</code></pre> <p>Create a policy from a string in Cedar policy format.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in Cedar policy format</p> required <p>Returns:</p> Type Description <code>Policy</code> <p>A policy</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"},{"location":"reference/policy/#cedar.Policy.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize policy into python dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A python dictionary</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy/#cedar.Policy.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize policy into JSON string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in JSON policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy/#cedar.Policy.to_pretty_string","title":"to_pretty_string  <code>method descriptor</code>","text":"<pre><code>to_pretty_string(\n    *,\n    line_width: int | None = None,\n    indent_width: int | None = None,\n) -&gt; str\n</code></pre> <p>Serialize policy into formatted Cedar policy string.</p> <p>By default, formatter uses a line width of 88 and an indentation width of 2.</p> <p>Parameters:</p> Name Type Description Default <code>line_width</code> <code>int | None</code> <p>an optional integer configuring formatter line width</p> <code>None</code> <code>indent_width</code> <code>int | None</code> <p>an optional integer configuring formatter indentation width</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A string in Cedar policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"},{"location":"reference/policy/#cedar.Policy.to_string","title":"to_string  <code>method descriptor</code>","text":"<pre><code>to_string() -&gt; str\n</code></pre> <p>Serialize policy into Cedar policy string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in Cedar policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"},{"location":"reference/policy/#cedar.Effect","title":"Effect","text":"<p>An effect specifies the intent of a policy, to either permit or forbid any request that matches the scope and conditions specified in the policy.</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html#term-policy-effect</li> </ul> <p>Attributes:</p> Name Type Description <code>Forbid</code> <code>Effect</code> <p>An effect specifies the intent of a policy, to either permit or forbid</p> <code>Permit</code> <code>Effect</code> <p>An effect specifies the intent of a policy, to either permit or forbid</p>"},{"location":"reference/policy/#cedar.Effect.Forbid","title":"Forbid  <code>class</code>","text":"<pre><code>Forbid: Effect = Effect.Forbid\n</code></pre> <p>An effect specifies the intent of a policy, to either permit or forbid any request that matches the scope and conditions specified in the policy.</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html#term-policy-effect</li> </ul>"},{"location":"reference/policy/#cedar.Effect.Permit","title":"Permit  <code>class</code>","text":"<pre><code>Permit: Effect = Effect.Permit\n</code></pre> <p>An effect specifies the intent of a policy, to either permit or forbid any request that matches the scope and conditions specified in the policy.</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html#term-policy-effect</li> </ul>"},{"location":"reference/policy_set/","title":"Policy Set","text":""},{"location":"reference/policy_set/#cedar.PolicySet","title":"PolicySet","text":"<pre><code>PolicySet(policies: list[Policy])\n</code></pre> <p>Represents a set of Policies.</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>list[Policy]</code> <p>a list of policies</p> required See also <ul> <li>https://docs.rs/cedar-policy/latest/cedar_policy/struct.PolicySet.html</li> </ul> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create a policy set from a dict holding JSON policies definitions.</p> <code>from_json</code> <p>Create a policy set from a string in JSON policy format.</p> <code>from_string</code> <p>Create policy set from a Cedar policy string.</p> <code>to_dict</code> <p>Serialize policy set into python dictionary.</p> <code>to_json</code> <p>Serialize policy set into JSON string.</p> <code>to_pretty_string</code> <p>Serialize policy set into formatted Cedar policy string.</p> <code>to_string</code> <p>Serialize policy set into Cedar policy string.</p> <p>Attributes:</p> Name Type Description <code>policies</code> <code>list[Policy]</code> <p>Get policies from the policy set</p>"},{"location":"reference/policy_set/#cedar.PolicySet.policies","title":"policies  <code>property</code>","text":"<pre><code>policies: list[Policy]\n</code></pre> <p>Get policies from the policy set</p> <p>Returns:</p> Type Description <code>list[Policy]</code> <p>A list of policies</p>"},{"location":"reference/policy_set/#cedar.PolicySet.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: dict[str, Any]) -&gt; PolicySet\n</code></pre> <p>Create a policy set from a dict holding JSON policies definitions.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict[str, Any]</code> <p>a dict holding JSON policies definitions</p> required See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy_set/#cedar.PolicySet.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str) -&gt; PolicySet\n</code></pre> <p>Create a policy set from a string in JSON policy format.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in JSON policy format</p> required <p>Returns:</p> Type Description <code>PolicySet</code> <p>A policy</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy_set/#cedar.PolicySet.from_string","title":"from_string  <code>staticmethod</code>","text":"<pre><code>from_string(text: str) -&gt; PolicySet\n</code></pre> <p>Create policy set from a Cedar policy string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string holding policies in Cedar format</p> required <p>Returns:</p> Type Description <code>PolicySet</code> <p>A policy set</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"},{"location":"reference/policy_set/#cedar.PolicySet.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize policy set into python dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A python dictionary</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy_set/#cedar.PolicySet.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize policy set into JSON string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in JSON policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/json-format.html</li> </ul>"},{"location":"reference/policy_set/#cedar.PolicySet.to_pretty_string","title":"to_pretty_string  <code>method descriptor</code>","text":"<pre><code>to_pretty_string(\n    *,\n    line_width: int | None = None,\n    indent_width: int | None = None,\n) -&gt; str\n</code></pre> <p>Serialize policy set into formatted Cedar policy string.</p> <p>By default, formatter uses a line width of 88 and an indentation width of 2.</p> <p>Parameters:</p> Name Type Description Default <code>line_width</code> <code>int | None</code> <p>an optional integer configuring formatter line width</p> <code>None</code> <code>indent_width</code> <code>int | None</code> <p>an optional integer configuring formatter indentation width</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A string in Cedar policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"},{"location":"reference/policy_set/#cedar.PolicySet.to_string","title":"to_string  <code>method descriptor</code>","text":"<pre><code>to_string() -&gt; str\n</code></pre> <p>Serialize policy set into Cedar policy string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in Cedar policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"},{"location":"reference/request/","title":"Request","text":""},{"location":"reference/request/#cedar.Request","title":"Request","text":"<pre><code>Request(\n    principal: EntityUid,\n    action: EntityUid,\n    resource: EntityUid,\n    context: dict[str, Any] | None = None,\n    correlation_id: str | None = None,\n)\n</code></pre> <p>Cedar authorization request.</p> <p>Parameters:</p> Name Type Description Default <code>principal</code> <code>EntityUid</code> <p>the principal to authorize</p> required <code>action</code> <code>EntityUid</code> <p>the action to authorize principal to perform</p> required <code>resource</code> <code>EntityUid</code> <p>the resource to authorize principal to take action on</p> required <code>context</code> <code>dict[str, Any] | None</code> <p>the context for this auhtorization request</p> <code>None</code> Tip <p>An authorization request is a tuple  where <ul> <li>P is the principal EntityUid,</li> <li>A is the action EntityUid,</li> <li>R is the resource EntityUid, and</li> <li>C is the request Context record.</li> </ul> <p>It represents an authorization request asking the question, \u201cCan this principal take this action on this resource in this context?\u201d</p> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create a new authorization request from a python dictionary.</p> <code>from_json</code> <p>Create a new authorization request from a JSON string.</p> <p>Attributes:</p> Name Type Description <code>action</code> <code>EntityUid</code> <p>Get action for this request.</p> <code>context</code> <code>str | None</code> <p>Get the context for this request as a python dictionary.</p> <code>correlation_id</code> <code>str | None</code> <p>Get the correlation ID associated to this request.</p> <code>principal</code> <code>EntityUid</code> <p>Get principal for this request.</p> <code>resource</code> <code>EntityUid</code> <p>Get resource for this request.</p>"},{"location":"reference/request/#cedar.Request.action","title":"action  <code>property</code>","text":"<pre><code>action: EntityUid\n</code></pre> <p>Get action for this request.</p>"},{"location":"reference/request/#cedar.Request.context","title":"context  <code>property</code>","text":"<pre><code>context: str | None\n</code></pre> <p>Get the context for this request as a python dictionary.</p>"},{"location":"reference/request/#cedar.Request.correlation_id","title":"correlation_id  <code>property</code>","text":"<pre><code>correlation_id: str | None\n</code></pre> <p>Get the correlation ID associated to this request.</p>"},{"location":"reference/request/#cedar.Request.principal","title":"principal  <code>property</code>","text":"<pre><code>principal: EntityUid\n</code></pre> <p>Get principal for this request.</p>"},{"location":"reference/request/#cedar.Request.resource","title":"resource  <code>property</code>","text":"<pre><code>resource: EntityUid\n</code></pre> <p>Get resource for this request.</p>"},{"location":"reference/request/#cedar.Request.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: dict[str, Any]) -&gt; Request\n</code></pre> <p>Create a new authorization request from a python dictionary.</p>"},{"location":"reference/request/#cedar.Request.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str) -&gt; Request\n</code></pre> <p>Create a new authorization request from a JSON string.</p>"},{"location":"reference/response/","title":"Response","text":""},{"location":"reference/response/#cedar.Response","title":"Response","text":"<pre><code>Response(\n    decision: Decision,\n    diagnostics: Diagnostics,\n    correlation_id: str | None = None,\n)\n</code></pre> <p>Authorization response returned from the Authorizer.</p> <p>Parameters:</p> Name Type Description Default <code>decision</code> <code>Decision</code> <p>the authorization decision, either Deny or Allow</p> required <code>diagnostics</code> <code>Diagnostics</code> <p>the authorization diagnostics</p> required <code>correlation_id</code> <code>str | None</code> <p>an optional correlation id as a string</p> <code>None</code> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create a new response from a python dictionary.</p> <code>from_json</code> <p>Create a new response from a JSON string.</p> <code>to_dict</code> <p>Serialize response to a python dictionary.</p> <code>to_json</code> <p>Serialize response to a JSON string.</p> <p>Attributes:</p> Name Type Description <code>correlation_id</code> <code>str | None</code> <p>Get the correlation ID which was provided in authorization request (may be None)</p> <code>decision</code> <code>Decision</code> <p>Get the decision from the response.</p> <code>diagnostics</code> <code>Diagnostics</code> <p>Get diagnostics associated to decision.</p>"},{"location":"reference/response/#cedar.Response.correlation_id","title":"correlation_id  <code>property</code>","text":"<pre><code>correlation_id: str | None\n</code></pre> <p>Get the correlation ID which was provided in authorization request (may be None)</p>"},{"location":"reference/response/#cedar.Response.decision","title":"decision  <code>property</code>","text":"<pre><code>decision: Decision\n</code></pre> <p>Get the decision from the response.</p>"},{"location":"reference/response/#cedar.Response.diagnostics","title":"diagnostics  <code>property</code>","text":"<pre><code>diagnostics: Diagnostics\n</code></pre> <p>Get diagnostics associated to decision.</p>"},{"location":"reference/response/#cedar.Response.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: dict[str, Any]) -&gt; Response\n</code></pre> <p>Create a new response from a python dictionary.</p>"},{"location":"reference/response/#cedar.Response.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str) -&gt; Response\n</code></pre> <p>Create a new response from a JSON string.</p>"},{"location":"reference/response/#cedar.Response.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize response to a python dictionary.</p>"},{"location":"reference/response/#cedar.Response.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize response to a JSON string.</p>"},{"location":"reference/response/#cedar.Decision","title":"Decision","text":"<p>Decision returned from the Authorizer</p> <p>Attributes:</p> Name Type Description <code>Allow</code> <code>Decision</code> <p>Decision returned from the Authorizer</p> <code>Deny</code> <code>Decision</code> <p>Decision returned from the Authorizer</p>"},{"location":"reference/response/#cedar.Decision.Allow","title":"Allow  <code>class</code>","text":"<pre><code>Allow: Decision = Decision.Allow\n</code></pre> <p>Decision returned from the Authorizer</p>"},{"location":"reference/response/#cedar.Decision.Deny","title":"Deny  <code>class</code>","text":"<pre><code>Deny: Decision = Decision.Deny\n</code></pre> <p>Decision returned from the Authorizer</p>"},{"location":"reference/response/#cedar.Diagnostics","title":"Diagnostics","text":"<pre><code>Diagnostics(\n    reason: list[str] | None = None,\n    errors: list[str] | None = None,\n)\n</code></pre> <p>Diagnostics providing more information on how a Decision was reached.</p> <p>Parameters:</p> Name Type Description Default <code>reason</code> <code>list[str] | None</code> <p>an optional list of policies ids</p> <code>None</code> <code>errors</code> <code>list[str] | None</code> <p>an optional list of error messages</p> <code>None</code> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create a new diagnostics instance from a python dictionary.</p> <code>from_json</code> <p>Create a new diagnostics instance from a JSON string.</p> <code>to_dict</code> <p>Serialize diagnotics to python dictionary.</p> <code>to_json</code> <p>Serialize diagnostics to JSON string.</p> <p>Attributes:</p> Name Type Description <code>errors</code> <code>list[str]</code> <p>Get the errors that occurred during authorization.</p> <code>reasons</code> <code>set[str]</code> <p>Get the PolicyIds of the policies that contributed to the decision.</p>"},{"location":"reference/response/#cedar.Diagnostics.errors","title":"errors  <code>property</code>","text":"<pre><code>errors: list[str]\n</code></pre> <p>Get the errors that occurred during authorization. The errors should be treated as unordered, since policies may be evaluated in any order.</p>"},{"location":"reference/response/#cedar.Diagnostics.reasons","title":"reasons  <code>property</code>","text":"<pre><code>reasons: set[str]\n</code></pre> <p>Get the PolicyIds of the policies that contributed to the decision. If no policies applied to the request, this set will be empty.</p>"},{"location":"reference/response/#cedar.Diagnostics.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: dict[str, Any]) -&gt; Diagnostics\n</code></pre> <p>Create a new diagnostics instance from a python dictionary.</p>"},{"location":"reference/response/#cedar.Diagnostics.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str) -&gt; Diagnostics\n</code></pre> <p>Create a new diagnostics instance from a JSON string.</p>"},{"location":"reference/response/#cedar.Diagnostics.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize diagnotics to python dictionary.</p>"},{"location":"reference/response/#cedar.Diagnostics.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize diagnostics to JSON string.</p>"},{"location":"reference/schema/","title":"Schema","text":""},{"location":"reference/schema/#cedar.Schema","title":"Schema","text":"<p>Object containing schema information used by the validator.</p> <p>A schema is a declaration of the structure of the entity types that you want to support in your application and for which you want Cedar to provide authorization services. After you define a schema, you can ask Cedar to validate your policies against it to ensure that your policies do not contain type errors, such as referencing the entities and their attributes incorrectly.</p> See also <ul> <li>https://docs.cedarpolicy.com/schema/schema.html</li> </ul> <p>Methods:</p> Name Description <code>from_dict</code> <p>Create a schema from a python dictionary.</p> <code>from_json</code> <p>Create a schema from a JSON string.</p> <code>from_string</code> <p>Create a schema from a cedar language string.</p> <code>to_dict</code> <p>Serialize schema to python dictionary.</p> <code>to_json</code> <p>Serialize schema to JSON string.</p> <code>to_string</code> <p>Serialize schema to cedar language string.</p> <code>validate_policies</code> <p>Validate given policies against the schema.</p>"},{"location":"reference/schema/#cedar.Schema.from_dict","title":"from_dict  <code>staticmethod</code>","text":"<pre><code>from_dict(values: dict[str, Any]) -&gt; Schema\n</code></pre> <p>Create a schema from a python dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict[str, Any]</code> <p>dictionary holding schema definition</p> required See also <ul> <li>https://docs.cedarpolicy.com/schema/json-schema.html</li> </ul>"},{"location":"reference/schema/#cedar.Schema.from_json","title":"from_json  <code>staticmethod</code>","text":"<pre><code>from_json(text: str) -&gt; Schema\n</code></pre> <p>Create a schema from a JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in JSON format</p> required See also <ul> <li>https://docs.cedarpolicy.com/schema/json-schema.html</li> </ul>"},{"location":"reference/schema/#cedar.Schema.from_string","title":"from_string  <code>staticmethod</code>","text":"<pre><code>from_string(text: str) -&gt; Schema\n</code></pre> <p>Create a schema from a cedar language string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>a string in Cedar format</p> required See also <ul> <li>https://docs.cedarpolicy.com/schema/human-readable-schema.html</li> </ul>"},{"location":"reference/schema/#cedar.Schema.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize schema to python dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A python dictionary</p> See also <ul> <li>https://docs.cedarpolicy.com/schema/json-schema.html</li> </ul>"},{"location":"reference/schema/#cedar.Schema.to_json","title":"to_json  <code>method descriptor</code>","text":"<pre><code>to_json() -&gt; str\n</code></pre> <p>Serialize schema to JSON string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in JSON format</p> See also <ul> <li>https://docs.cedarpolicy.com/schema/json-schema.html</li> </ul>"},{"location":"reference/schema/#cedar.Schema.to_string","title":"to_string  <code>method descriptor</code>","text":"<pre><code>to_string() -&gt; str\n</code></pre> <p>Serialize schema to cedar language string.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string in Cedar format</p> See also <ul> <li>https://docs.cedarpolicy.com/schema/human-readable-schema.html</li> </ul>"},{"location":"reference/schema/#cedar.Schema.validate_policies","title":"validate_policies  <code>method descriptor</code>","text":"<pre><code>validate_policies(policies: PolicySet) -&gt; ValidationResult\n</code></pre> <p>Validate given policies against the schema.</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>PolicySet</code> <p>the policies to validate</p> required <p>Returns:</p> Type Description <code>ValidationResult</code> <p>A validation result</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/validation.html</li> </ul>"},{"location":"reference/schema/#cedar.ValidationResult","title":"ValidationResult","text":"<p>Output of policy validation against a schema.</p> <p>Contains the result of policy validation. The result includes the list of issues found by validation and whether validation succeeds or fails. Validation succeeds if there are no fatal errors. There may still be non-fatal warnings present when validation passes.</p> <p>Methods:</p> Name Description <code>to_dict</code> <p>Serialize validation result into python dictionary.</p> <code>to_string</code> <p>Return a string representation of the validation result.</p> <p>Attributes:</p> Name Type Description <code>errors</code> <code>list[str]</code> <p>Get errors emitted during validation.</p> <code>passed</code> <code>bool</code> <p>Check if validation passed.</p> <code>passed_without_warning</code> <code>bool</code> <p>Check if validation passed without warning.</p> <code>warnings</code> <code>list[str]</code> <p>Get warnings emitted during validation.</p>"},{"location":"reference/schema/#cedar.ValidationResult.errors","title":"errors  <code>property</code>","text":"<pre><code>errors: list[str]\n</code></pre> <p>Get errors emitted during validation.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of error messages</p>"},{"location":"reference/schema/#cedar.ValidationResult.passed","title":"passed  <code>property</code>","text":"<pre><code>passed: bool\n</code></pre> <p>Check if validation passed.</p> <p>There may still be non-fatal warnings present when validation passes.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if there is no error, else False</p>"},{"location":"reference/schema/#cedar.ValidationResult.passed_without_warning","title":"passed_without_warning  <code>property</code>","text":"<pre><code>passed_without_warning: bool\n</code></pre> <p>Check if validation passed without warning.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if there is no error and no warning, else False</p>"},{"location":"reference/schema/#cedar.ValidationResult.warnings","title":"warnings  <code>property</code>","text":"<pre><code>warnings: list[str]\n</code></pre> <p>Get warnings emitted during validation.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of warning messages</p>"},{"location":"reference/schema/#cedar.ValidationResult.to_dict","title":"to_dict  <code>method descriptor</code>","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Serialize validation result into python dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A python dictionary</p> See also <ul> <li>https://docs.rs/cedar-policy/latest/cedar_policy/struct.ValidationResult.html</li> </ul>"},{"location":"reference/schema/#cedar.ValidationResult.to_string","title":"to_string  <code>method descriptor</code>","text":"<pre><code>to_string() -&gt; str\n</code></pre> <p>Return a string representation of the validation result.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string which can be used in error messages.</p>"},{"location":"reference/utilities/","title":"Utilities","text":""},{"location":"reference/utilities/#cedar.format_policies","title":"format_policies  <code>builtin</code>","text":"<pre><code>format_policies(\n    text,\n    /,\n    *,\n    line_width: int | None = None,\n    indent_width: int | None = None,\n) -&gt; str\n</code></pre> <p>Format given policy.</p> <p>By default, formatter uses a line width of 88 and an indentation width of 2.</p> <p>Parameters:</p> Name Type Description Default <code>line_width</code> <code>int | None</code> <p>an optional integer configuring formatter line width</p> <code>None</code> <code>indent_width</code> <code>int | None</code> <p>an optional integer configuring formatter indentation width</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A string in Cedar policy format</p> See also <ul> <li>https://docs.cedarpolicy.com/policies/syntax-policy.html</li> </ul>"}]}